
version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  db:
    image: postgres:15
    container_name: go-postgres-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: bank
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  api1:
    build:
      context: ..               
      dockerfile: build/bank_api/Dockerfile
    container_name: go-api-1
    expose:
      - "3000"
    environment:
      - API_NAME=API-1
      - PORT=3000
    depends_on:
      - db
      - redis
      - kafka

  api2:
    build:
      context: ..               
      dockerfile: build/bank_api/Dockerfile
    container_name: go-api-2
    expose:
      - "3000"
    environment:
      - API_NAME=API-2
      - PORT=3000
    depends_on:
      - db
      - redis
      - kafka

  apiauth:
    build:
      context: ..               
      dockerfile: build/auth_api/Dockerfile
    container_name: go-auth-api-1
    expose:
      - "4000"
    environment:
      - API_NAME=API-AUTH-1
      - PORT=4000
    depends_on:
      - db
      - redis
      - kafka

  apitransaction:
    build:
      context: ..               
      dockerfile: build/transaction_api/Dockerfile
    container_name: go-transaction-api-1
    expose:
      - "4000"
    environment:
      - API_NAME=API-TRANSACTION-1
      - PORT=4000
    depends_on:
      - db
      - redis
      - kafka

  nginx:
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api1
      - api2
      - apiauth
    networks:
      - default
  
volumes:
  db_data:
  kafka_data: